<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Autovy&#39;s blog</title>
  
  <subtitle>Just For Interest</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-06-02T03:27:52.990Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Autovy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2021/05/28/Docker%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/05/28/Docker%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-28T12:11:50.330Z</published>
    <updated>2021-06-02T03:27:52.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h3><h4 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h4><ul><li>部署环境复杂，非常费时费力</li><li>环境不能跨平台</li><li>docker可以把环境打包成镜像，直接运行即可</li><li>docker通过隔离机制，可以将服务器利用到极致</li></ul><h4 id="Docker的功能"><a href="#Docker的功能" class="headerlink" title="Docker的功能"></a>Docker的功能</h4><ul><li><p>虚拟机技术</p></li><li><p>容器化技术</p></li><li><p>DevOps（开发 + 运维）</p></li><li><p>应用更加快速的交付和部署</p></li><li><p>更便捷的升级和扩缩容</p></li><li><p>更加简单的系统运维</p></li><li><p>更加高效的计算资源利用</p></li></ul><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1.Docker基本组成"></a>1.Docker基本组成</h4><ul><li><p>仓库：仓库就是存放镜像的地方</p></li><li><p>镜像：docker镜像就像一个模板，通过镜像可以创建多个容器</p></li><li><p>容器：容器可以独立运行一个或者多组应用（启动，停止，删除）</p></li></ul><h4 id="2-run工作流程"><a href="#2-run工作流程" class="headerlink" title="2.run工作流程"></a>2.run工作流程</h4><p><img src="https://img-blog.csdnimg.cn/20200707143715125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhcHB5X1N1bnNoaW5lX0JveQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-Docker工作原理"><a href="#3-Docker工作原理" class="headerlink" title="3.Docker工作原理"></a>3.Docker工作原理</h4><p><img src="https://i.loli.net/2019/06/15/5d04a77399fcc37849.png" alt="Docker 工作原理"></p><h4 id="4-Docker与VM的区别"><a href="#4-Docker与VM的区别" class="headerlink" title="4.Docker与VM的区别"></a>4.Docker与VM的区别</h4><p><img src="https://images.contentstack.io/v3/assets/blt300387d93dabf50e/bltb6200bc085503718/5e1f209a63d1b6503160c6d5/containers-vs-virtual-machines.jpg" alt="containers-vs-virtual-machines.jpg"></p><ul><li>Docker的抽象层比虚拟机少</li><li>docker利用的是宿主机的内核，vm需要的是Guest OS（vm每次都要加载操作系统的内核）</li></ul><h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p><img src="https://maichong.io/help/images/docker-induction.jpg" alt="img"></p><h4 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h4><p>（1）docker images查看本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>REPOSITORY :镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像的id</li><li>CREATED：镜像的创建时间    </li><li>SIZE：镜像大小</li></ul><p>可选项：</p><ul><li>-a : 列出所有镜像</li><li>-q：只显示镜像id</li></ul><p>（2）docker search 搜索镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NAME  DESCRIPTION   STARS  OFFICIAL   AUTOMATED</span><br></pre></td></tr></table></figure><p>可选项，可以过滤搜索结果：</p><p>–filter=STARS=3000 ：搜索stars大于3000的镜像</p><p>（3）docker pull 拉取镜像:tag ，默认拉取最新版</p><p>（4）docker rmi 删除镜像名称/id   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除mysql镜像</span></span><br><span class="line">docker rmi -f mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除所有镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h4><p>有了镜像我们才能创建容器</p><p>（1）新建镜像并启动：dokcer run [可选参数] image</p><p>容器内相当于一个新的虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>–name = “Name” ：容器名字，用于区分容器</li><li>-d ：后台方式运行</li><li>-it : 使用交互方式运行，可进入容器查看内容（开启容器终端）</li><li>-p：指定容器端口</li></ul><p>（2）查看容器：docker ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps    #查看运行中的容器</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>-a  ：查看所有容器（包括已终止的容器）</li><li>-n = ? :显示最近创建的容器</li><li>-q ： 只显示容器的编号</li></ul><p>（3）退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 容器停止并退出</span><br><span class="line">ctrl + P + Q # 容器不停止退出(按P,Q这个设计多少有点反人类)</span><br></pre></td></tr></table></figure><p>（4）删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定的容器(不能删除运行中的容器，加-f强制删除)</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有容器</span><br></pre></td></tr></table></figure><p>（5）启动和停止容器的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure><h4 id="4-操作命令"><a href="#4-操作命令" class="headerlink" title="4.操作命令"></a>4.操作命令</h4><p>（1）后台启动命令</p><p>docker容器使用后台运行时（<code>docker run -d centos</code>），必须要有一个前台进程，如果docker发现自己没有应用了，就会自动停止</p><p>（2）查看日志命令</p><p>查看容器运行的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br></pre></td></tr></table></figure><p>（3）查看容器进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><p>（4）查看镜像元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p>（5）进入当前正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1:进入容器后开启一个新的终端（相当于开启了另一个进程）</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2：进入容器正在执行的终端中，不会启动新的进程</span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure><p>（6）从容器中拷贝文件到主机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 2e18c3e0375a:/home/test.py /home/autovy/桌面</span><br></pre></td></tr></table></figure><p>拷贝是一个手动过程，从封闭的容器中拿到需要留存的数据，而使用数据卷</p><p>则可以实现自动同步</p><h3 id="Docker镜d像"><a href="#Docker镜d像" class="headerlink" title="Docker镜d像"></a>Docker镜d像</h3><p>推荐文章：<a href="http://linyishui.top/2019101101.html">docker镜像讲解</a></p><h4 id="1-Portainer可视化工具"><a href="#1-Portainer可视化工具" class="headerlink" title="1.Portainer可视化工具"></a>1.Portainer可视化工具</h4><h4 id="2-镜像简介"><a href="#2-镜像简介" class="headerlink" title="2.镜像简介"></a>2.镜像简介</h4><ul><li>镜像就是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于环境开会的软件（包括代码，运行时，库，环境变量，配置文件）</li><li>镜像来源：<ul><li>从远程仓库下载</li><li>自己制作的镜像DockerFile</li></ul></li></ul><h4 id="3-镜像加载原理"><a href="#3-镜像加载原理" class="headerlink" title="3.镜像加载原理"></a>3.镜像加载原理</h4><p>（1）联合文件系统（UnionFS）</p><p>镜像和容器不同，容器是彼此独立的，而容器是分层叠加的，可以共享相同的底层文件和目录</p><p><img src="https://upload-images.jianshu.io/upload_images/3548638-6967b650574b7f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/353/format/webp" alt="img"></p><p>（2）镜像加载原理</p><p>共享底层资源</p><p><img src="https://img2020.cnblogs.com/blog/1740019/202105/1740019-20210507114140385-1486581159.png" alt="docker文件系统分层存储原理"></p><h4 id="4-分层理解"><a href="#4-分层理解" class="headerlink" title="4.分层理解"></a>4.分层理解</h4><p>基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。该镜像当前已经包含3个镜像层</p><p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20191001/201910010121.png" alt="基于Ubuntu Linux 16.04创建镜像"></p><p>docker镜像默认只读，当容器启动时，一个新的可写层被加载到镜像顶部</p><p>这一层即为容器层，容器之下称为镜像层</p><h4 id="5-commit镜像"><a href="#5-commit镜像" class="headerlink" title="5.commit镜像"></a>5.commit镜像</h4><p>提交一个新的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理相似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="1-数据卷原理"><a href="#1-数据卷原理" class="headerlink" title="1.数据卷原理"></a>1.数据卷原理</h4><p>容器之间有一个数据共享技术，Docker容器中产生的数据，同步到本地（从而实现数据可持久化，数据同步操作，数据存储在本地不会随着容器删除而丢失）</p><p>其本质是将容器内的目录挂载到主机上</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Jicy5pdGhlaW1hLmNvbS9kYXRhL2F0dGFjaG1lbnQvZm9ydW0vMjAxOTA2LzA1LzE5NDgzMG1nbXp1anY2ZXV5YWVqbGIucG5nLnRodW1iLmpwZw?x-oss-process=image/format,png" alt="数据卷容器实践_heima201907的博客-CSDN博客"></p><h4 id="2-数据卷使用"><a href="#2-数据卷使用" class="headerlink" title="2.数据卷使用"></a>2.数据卷使用</h4><p>（1）使用命令挂载 -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录地址:容器目录地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：将容器的目录挂载到主机目录</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure><ul><li>主机和容器没有对应目录时会自动创建目录</li><li>通过docker inspect 可以查看到挂载信息</li><li>挂载双方是双向同步关系，他们的文件内容无论哪一方更改，都会保持同步</li><li>修改文件时，只需要在本地修改即可，不需要进入容器</li></ul><p>（2）具名挂载和匿名挂载</p><p>除了上文中的指定路径挂载，我们也可以使用具名挂载和匿名挂载</p><p>匿名挂载：<code>-v :容器目录地址</code></p><p>具名挂载：<code>-v 卷名:容器目录地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v /home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v mycentos:/home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷(可以看到存在匿名卷)</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷默认放在本地主机的<code>/var/lib/docker/volumes下</code></p><p>（3）挂载权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 -v 容器路径：ro,rw改变读写权限</span></span><br><span class="line">ro # 只读，只能通过宿主机来操作，容器内部无法进行操作</span><br><span class="line">rw # 可读可写，默认为可读可写</span><br></pre></td></tr></table></figure><h4 id="3-数据卷容器"><a href="#3-数据卷容器" class="headerlink" title="3.数据卷容器"></a>3.数据卷容器</h4><p><img src="https://img-blog.csdnimg.cn/20190113103219766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmdsaTIwMTc=,size_16,color_FFFFFF,t_70" alt="Docker学习过程（5-数据卷）_gengli2017的博客-CSDN博客"></p><p>容器间也可以进行挂载从而实现数据同步，多个子容器的数据可以挂载到一个父容器中，这个父容器就是数据卷容器</p><p>–volumes-from即可以让docker3挂载到docker1上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name docker3 --volumes-from docker1 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>参考文章：<a href="https://blog.52itstyle.vip/archives/2839/">DokcerFile命令详解</a></p><h4 id="1-DockerFile简介"><a href="#1-DockerFile简介" class="headerlink" title="1.DockerFile简介"></a>1.DockerFile简介</h4><p>DockerFile是构建docker镜像的构建文件，即命令脚本。通过这个脚本我们可以生成一个镜像。</p><p><img src="https://img-blog.csdnimg.cn/2021032416514251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTU3Mzc3MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-DockerFile构建流程"><a href="#2-DockerFile构建流程" class="headerlink" title="2.DockerFile构建流程"></a>2.DockerFile构建流程</h4><p>（1）DockerFile内容示例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建镜像形成两个数据卷，因为没有指定的挂载卷会自动进行匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>（2）通过DockerFile文件构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile -t test/centos .</span><br></pre></td></tr></table></figure><p>build命令， -f  打开dockerfile文件的路径，-t  test/centos命名容器，.即为生成路径</p><p>（3）用自己的镜像创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure><p>（4）docker push 发布镜像（开源进行）</p><h4 id="3-DockerFile指令详解"><a href="#3-DockerFile指令详解" class="headerlink" title="3.DockerFile指令详解"></a>3.DockerFile指令详解</h4><p><img src="https://img2018.cnblogs.com/i-beta/631711/201912/631711-20191220153130957-348455400.png" alt="img"></p><p>（图中最后一项应为CMD指令此处更正）</p><p>补充项：</p><ul><li><p>CMD：指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</p></li><li><p>ENTRYPOINT：指定这个容器启动时要运行的命令，可以追加命令</p></li><li><p>COPY：类似于ADD，将我们文件拷贝到镜像中</p></li><li><p>ENV：构建的时候设置环境变量</p></li></ul><h4 id="4-创建自己的DockerFile"><a href="#4-创建自己的DockerFile" class="headerlink" title="4.创建自己的DockerFile"></a>4.创建自己的DockerFile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> Autovy&lt;autovys@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为/usr/local</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p> 通过<code>docker history mycentos:0.1</code>  命令可以查看构建镜像的过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker概述&quot;&gt;&lt;a href=&quot;#Docker概述&quot; class=&quot;headerlink&quot; title=&quot;Docker概述&quot;&gt;&lt;/a&gt;Docker概述&lt;/h3&gt;&lt;h4 id=&quot;Docker应用&quot;&gt;&lt;a href=&quot;#Docker应用&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python实战：学生管理系统</title>
    <link href="http://yoursite.com/2020/03/27/2020-3-11-python%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2020/03/27/2020-3-11-python%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-03-27T06:30:00.000Z</published>
    <updated>2020-03-27T10:15:48.601Z</updated>
    
    <content type="html"><![CDATA[<p>实战是检验编程掌握程度的唯一标准</p><span id="more"></span><h3 id="模拟数据库"><a href="#模拟数据库" class="headerlink" title="模拟数据库"></a>模拟数据库</h3><p>用列表为主体储存全部学生信息，方便读取。用字典这种数据类型放置一个学生信息。方便对列表操作时整块操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data = [   <span class="comment">#列表</span></span><br><span class="line">   <span class="comment">#字典</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>:<span class="string">&quot;佛山&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;广州&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jhon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;厦门&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="操作框架"><a href="#操作框架" class="headerlink" title="操作框架"></a>操作框架</h3><p>写代码优先规划好主框架，然后再补充功能函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(</span><br><span class="line">            <span class="string">&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            欢迎使用【学生管理系统】</span></span><br><span class="line"><span class="string">            0.退出系统</span></span><br><span class="line"><span class="string">            1.显示所有学生信息</span></span><br><span class="line"><span class="string">            2.新建学生信息</span></span><br><span class="line"><span class="string">            3.查询学生信息</span></span><br><span class="line"><span class="string">            4.修改学生信息</span></span><br><span class="line"><span class="string">            5.删除学生信息                            </span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">    op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的操作：&quot;</span>)) <span class="comment">#转化输入的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op==<span class="number">1</span> :</span><br><span class="line">        print(<span class="string">&quot;显示所有学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">2</span> :</span><br><span class="line">        print(<span class="string">&quot;新建学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">3</span> :</span><br><span class="line">        print(<span class="string">&quot;查询学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">4</span> :</span><br><span class="line">        print(<span class="string">&quot;修改学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">5</span> :</span><br><span class="line">        print(<span class="string">&quot;删除学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment">#退出循环</span></span><br></pre></td></tr></table></figure><h3 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span>() :</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas :</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;学生信息：&quot;</span>, data)</span><br></pre></td></tr></table></figure><p>1.Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串，相当于用data逐个存储列表datas的信息</p><p>2.值得注意的是，python的函数必须写在调用函数之前（毕竟没有声明嘛）</p><h3 id="新增学生"><a href="#新增学生" class="headerlink" title="新增学生"></a>新增学生</h3><p>用字典存储学生信息，用赋值的方法修改（添加）信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;新增学生名字：&quot;</span>)</span><br><span class="line">    sex = <span class="built_in">input</span>(<span class="string">&quot;新增学生性别：&quot;</span>)</span><br><span class="line">    adress = <span class="built_in">input</span>(<span class="string">&quot;新增学生地址：&quot;</span>) <span class="comment">#变量储存</span></span><br><span class="line">    student = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: sex,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: adress</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datas.append(student) <span class="comment">#新增列表的项</span></span><br></pre></td></tr></table></figure><h3 id="查询学生"><a href="#查询学生" class="headerlink" title="查询学生"></a>查询学生</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;查询学生姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(data)</span><br></pre></td></tr></table></figure><p>列表+字典的信息储存形式用循环遍历字典内容，data就是字典名</p><h3 id="修改学生信息"><a href="#修改学生信息" class="headerlink" title="修改学生信息"></a>修改学生信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;修改学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(<span class="string">&quot;修改前学生信息：&quot;</span>,data)</span><br><span class="line">            data[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改的名字：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;sex&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改性别：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;adress&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改地址：&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;修改后学生信息：&quot;</span>,data)</span><br></pre></td></tr></table></figure><p>循环遍历字典内容，赋值修改信息</p><h4 id="删除学生信息"><a href="#删除学生信息" class="headerlink" title="删除学生信息"></a>删除学生信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;删除学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            datas.remove(data)</span><br></pre></td></tr></table></figure><p>data中相当于存储了整个字典，把他一整个删去即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实战是检验编程掌握程度的唯一标准&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="入门教程" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/03/26/2020-3-11-python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2020/03/26/2020-3-11-python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2020-03-26T06:30:00.000Z</published>
    <updated>2020-03-27T10:16:03.283Z</updated>
    
    <content type="html"><![CDATA[<p>继续来学习python的语法！</p><span id="more"></span><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1.转义字符"></a>1.转义字符</h4><p>和其他语言没差别\n：换行，\t ：tab键等等</p><h4 id="2-字符串的索引"><a href="#2-字符串的索引" class="headerlink" title="2.字符串的索引"></a>2.字符串的索引</h4><p>索引格式：字符串[开始：结束：步数]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;床前明月光&quot;</span></span><br><span class="line">print(s[<span class="number">1</span>:<span class="number">5</span>:<span class="number">3</span>]) <span class="comment">#输出床月</span></span><br><span class="line">print(s[<span class="number">0</span>]) <span class="comment">#输出床</span></span><br><span class="line">print(s[-<span class="number">1</span>]) <span class="comment">#输出光</span></span><br><span class="line">print(s[-<span class="number">5</span>]) <span class="comment">#输出床</span></span><br></pre></td></tr></table></figure><p>3.字符串里的引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">&quot;John&quot;</span></span><br><span class="line">name2 = <span class="string">&quot;Mary&quot;</span></span><br><span class="line"><span class="comment">#用填充函数format</span></span><br><span class="line">print(<span class="string">&quot;&#123;&#125;和&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name1, name2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#更加简单的方法,用f&#x27; &#x27;格式输入 </span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;name1&#125;</span>和<span class="subst">&#123;name2&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="1-列表的索引"><a href="#1-列表的索引" class="headerlink" title="1.列表的索引"></a>1.列表的索引</h4><p>与字符串的索引类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;q&#x27;</span>, <span class="number">1.3</span>]</span><br><span class="line">print(<span class="built_in">list</span>[<span class="number">0</span>]) <span class="comment">#输出1 </span></span><br><span class="line">print(<span class="built_in">list</span>[<span class="number">2</span>]) <span class="comment">#输出q</span></span><br></pre></td></tr></table></figure><h4 id="2-增加元素"><a href="#2-增加元素" class="headerlink" title="2.增加元素"></a>2.增加元素</h4><p>列表增加元素的函数：append(元素) ,insert(位置，元素), extend(字符串)/extend([序列])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;q&#x27;</span>, <span class="number">1.3</span>]</span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&quot;python&quot;</span>) <span class="comment">#加在列表最后</span></span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">1</span>,<span class="string">&quot;python&quot;</span>) <span class="comment">#插在指定位置</span></span><br><span class="line"><span class="built_in">list</span>.extend(<span class="string">&quot;hello&quot;</span>) <span class="comment">#字符串拆开加入</span></span><br><span class="line"><span class="built_in">list</span>.extend([<span class="number">22</span>,<span class="number">33</span>]) <span class="comment">#加上一个列表</span></span><br></pre></td></tr></table></figure><h4 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3.删除元素"></a>3.删除元素</h4><p>列表删除元素的函数：pop(指定位置) ，remove(删除内容)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;q&#x27;</span>, <span class="number">1.3</span>] </span><br><span class="line"><span class="built_in">list</span>.pop() <span class="comment">#默认删除最后一位</span></span><br><span class="line"><span class="built_in">list</span>.pop(<span class="number">1</span>) <span class="comment">#指定位置</span></span><br><span class="line"><span class="built_in">list</span>.remove(<span class="number">2</span>) </span><br><span class="line"><span class="built_in">list</span>.remove(<span class="string">&#x27;q&#x27;</span>) <span class="comment">#指定内容</span></span><br></pre></td></tr></table></figure><h4 id="4-修改列表"><a href="#4-修改列表" class="headerlink" title="4.修改列表"></a>4.修改列表</h4><p>直接索引赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;q&#x27;</span>, <span class="number">1.3</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">2</span>] = <span class="number">34</span></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>与一种特殊的不可修改列表，只能索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;q&#x27;</span>, <span class="number">1.3</span>)</span><br><span class="line">print(<span class="built_in">list</span>[<span class="number">0</span>]) <span class="comment">#输出1 </span></span><br><span class="line">print(<span class="built_in">list</span>[<span class="number">2</span>]) <span class="comment">#输出q</span></span><br><span class="line">print(<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">#索引1~3位，取2，q，1.3</span></span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>python中的一种数据类型，与C语言的结构体类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 键值对（键对应着值）</span></span><br><span class="line">user = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">18</span></span><br><span class="line">    <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取字典元素中的值</span></span><br><span class="line">print(user[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改元素的值</span></span><br><span class="line">user[<span class="string">&quot;age&quot;</span>] = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增加元素</span></span><br><span class="line">user[<span class="string">&quot;fav&quot;</span>] = <span class="string">&quot;唱跳rap&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>和其他语言一样python也会有函数，提高代码复用性，用def声明一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt;= m:</span><br><span class="line">        s+=n</span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s  <span class="comment">#定义了一个n加到m的函数</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1.打开文件"></a>1.打开文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;文件名.txt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="comment">#encoding:文件编码格式</span></span><br><span class="line">s = f.read()<span class="comment">#读取打开的文件</span></span><br><span class="line">print(s)</span><br><span class="line">f.close()  <span class="comment">#关闭并保存文件</span></span><br></pre></td></tr></table></figure><h4 id="2-写文件"><a href="#2-写文件" class="headerlink" title="2.写文件"></a>2.写文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#open也可以创建文件，mode选择方式</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="comment">#mode=&quot;w&quot;为写入模式</span></span><br><span class="line">f.write(<span class="string">&quot;床前明月光&quot;</span>) <span class="comment">#write写入文本内容</span></span><br><span class="line">f.close() <span class="comment">#关闭并保存文件 </span></span><br></pre></td></tr></table></figure><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>python也有库，C语言用头文件引用库，而python用import</p><h4 id="1-自带库"><a href="#1-自带库" class="headerlink" title="1.自带库"></a>1.自带库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="comment">#生成随机数库</span></span><br><span class="line"></span><br><span class="line">print(random.randint(<span class="number">1</span>,<span class="number">5</span>)) <span class="comment">#随机生成1~5的整数</span></span><br></pre></td></tr></table></figure><h4 id="2-第三方库"><a href="#2-第三方库" class="headerlink" title="2.第三方库"></a>2.第三方库</h4><p>可以自行安装，安装后与自带库一样的方法引用</p><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>python是一门面向对象的语言，所以会有：类，对象，对象属性，对象方法，对象实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>：#声明一个类</span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">_init_</span>(<span class="params">self, name, sex, birthday</span>):</span> <span class="comment">#对象属性</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.sex = sex</span><br><span class="line">    self.birthday = birthday <span class="comment">#把对象属性储存起来</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self, word</span>):</span> <span class="comment">#对象的方法</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>说&quot;word&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">zhang_sang = Person(<span class="string">&quot;张三&quot;</span>， <span class="string">&quot;男&quot;</span>, <span class="string">&quot;11月11日&quot;</span> ) <span class="comment">#对象实例化</span></span><br><span class="line">zhang_sang.say(<span class="string">&quot;你好&quot;</span>) <span class="comment">#调用对象的方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续来学习python的语法！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="入门教程" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python语法入门（上）</title>
    <link href="http://yoursite.com/2020/03/26/2020-3-11-python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/03/26/2020-3-11-python%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2020-03-26T06:30:00.000Z</published>
    <updated>2020-03-27T10:15:56.421Z</updated>
    
    <content type="html"><![CDATA[<p>此文章并不适合对编程完全不了解的小白，主要展现的是python区别于其他编程语言的特点。当我看到python没数据类型，只感到一阵心肌梗塞……</p><span id="more"></span><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>别想了py不支持//注释和/* */注释，取而代之的是以下三种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个单行注释</span></span><br><span class="line">print(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">print(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>python 不用声明数据类型，b/a会直接返回一个浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">21</span></span><br><span class="line">b/a <span class="comment">#结果为2.1</span></span><br><span class="line">b//a <span class="comment">#取整除 - 向下取接近商的整数,结果为2</span></span><br><span class="line">b%a <span class="comment">#取模 - 返回除法的余数,结果为1</span></span><br><span class="line">a**b <span class="comment">#a**b 为10的21次方</span></span><br></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><h4 id="1-输出语句print"><a href="#1-输出语句print" class="headerlink" title="1.输出语句print"></a>1.输出语句print</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">print</span> (age) <span class="comment">#输出18</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;age&quot;</span>) <span class="comment">#输出字符串age</span></span><br><span class="line"><span class="built_in">print</span> (name) <span class="comment">#输出字符串Jhon</span></span><br></pre></td></tr></table></figure><p>输出语句自带换行buff，print() 有换行效果，要使两个语句不换行，应该要插入end</p><h4 id="2-在print中插入数字"><a href="#2-在print中插入数字" class="headerlink" title="2.在print中插入数字"></a>2.在print中插入数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">n = <span class="number">2</span></span><br><span class="line">m = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>*<span class="subst">&#123;m&#125;</span> = <span class="subst">&#123;n*m&#125;</span>&#x27;</span>,end=<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="comment">#格式输出2*5=10，并以$结尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;我的年龄是&quot;</span>, age)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">f&#x27;我的年龄是<span class="subst">&#123;age&#125;</span>&#x27;</span>) <span class="comment">#都可以正确输出</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;我的年龄是&#123;age&#125;&quot;</span>) <span class="comment">#这样无法引入数字 </span></span><br></pre></td></tr></table></figure><h4 id="3-输入语句input"><a href="#3-输入语句input" class="headerlink" title="3.输入语句input"></a>3.输入语句input</h4><p>input 可以接收一个Python表达式作为输入，并将运算结果返回，但是有“ ”号input函数会把常量转为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#输入常量</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误做法,这里的str实际上获得的是字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;输入你的号码：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>&gt;<span class="number">10</span> :</span><br><span class="line">    print(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="comment">#正确姿势</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入你的号码：&quot;</span>)) <span class="comment">#用int进行类型转换</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>&gt;<span class="number">10</span> :</span><br><span class="line">    print(<span class="string">&quot;ok&quot;</span>)        </span><br></pre></td></tr></table></figure><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>python的语句都不用{}，而是在句子后面加：，所以特别要注意缩进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">80</span></span><br><span class="line"><span class="keyword">if</span> score &gt;=<span class="number">90</span> ：</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;=<span class="number">70</span> ： <span class="comment">#else if都要缩写？？？</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> ：</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h5 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h5><p>C语言的写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= <span class="number">10</span>; i++ )</span><br></pre></td></tr></table></figure><p>在python中有更加语义化的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>, <span class="number">1</span>) </span><br><span class="line"><span class="comment">#range表示给i一个区间：1~10，且以1为间隔读取</span></span><br></pre></td></tr></table></figure><p>值得注意的是range(起始数：取得到 ,终止数:取不到，间隔 )</p><h5 id="2-while"><a href="#2-while" class="headerlink" title="2.while"></a>2.while</h5><p>死循环的写法：</p><p>C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">5</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>python中while的一般用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span> :</span><br><span class="line">    print(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">&quot;game over&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-循环控制"><a href="#3-循环控制" class="headerlink" title="3.循环控制"></a>3.循环控制</h5><p>break：直接跳出循环</p><p>continue ：直接进行下一次循环而不理会剩下的语句 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章并不适合对编程完全不了解的小白，主要展现的是python区别于其他编程语言的特点。当我看到python没数据类型，只感到一阵心肌梗塞……&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="入门教程" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js实践之坦克大战</title>
    <link href="http://yoursite.com/2020/02/15/js%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
    <id>http://yoursite.com/2020/02/15/js%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/</id>
    <published>2020-02-15T04:12:57.000Z</published>
    <updated>2020-03-14T04:27:22.636Z</updated>
    
    <content type="html"><![CDATA[<p>第一个前端项目，原生js开发的小游戏，运用了html5的canvas标签这个强大的工具。但是完全没有用面向对象，所以代码其实很初（辣）级（鸡）</p><span id="more"></span><p>完整代码地址：<a href="https://github.com/ZeroGate/tank-battle">https://github.com/ZeroGate/tank-battle</a></p><h4 id="引用css和js文件"><a href="#引用css和js文件" class="headerlink" title="引用css和js文件"></a>引用css和js文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/bootstrap.js&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 引入外部 css 文件代码如下，css文件引入代码应放在 <head></head> 中。</p><p> 引入外部 js 文件代码如下，js 文件引入代码应放在 body 的最底部（原因：页面加载更快）</p><h4 id="设置背景音乐"><a href="#设置背景音乐" class="headerlink" title="设置背景音乐"></a>设置背景音乐</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> 里面加入<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音乐url&quot;</span>  <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">audio</span>&gt;</span> autoplay意思是自动播放。</span><br></pre></td></tr></table></figure><h4 id="网页绘制图形"><a href="#网页绘制图形" class="headerlink" title="网页绘制图形"></a>网页绘制图形</h4><p>一个屏幕长度为864px</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>标签</span><br></pre></td></tr></table></figure><p>资料补充：<a href="https://blog.csdn.net/zhou134174/article/details/80523809">https://blog.csdn.net/zhou134174/article/details/80523809</a></p><p>与在外导入图像不同，它是直接在html上绘图的，没有空白的问题</p><p>但我采用css和图片来代替canvas的功能</p><p>(1)盒子模型构造围墙</p><p>盒子详解：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgrey;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">25px</span> solid green;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/15/js%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20200209072602558.png" alt="alt"></p><p>（2）图层z-index</p><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><p>注释：元素可拥有负的 z-index 属性值。</p><p>注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）！</p><p>说明：</p><p>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p><h4 id="移动图像准备"><a href="#移动图像准备" class="headerlink" title="移动图像准备"></a>移动图像准备</h4><p>1.ps抠图，解开图层，色彩范围，选择，delete</p><p>2.通过图片编辑旋转也可以直接用css的方法来旋转</p><p>3.Transform字面上就是变形，改变的意思。在CSS3中transform主要包括以下几种：<strong>旋转rotate</strong>、<strong>扭曲skew</strong>、<strong>缩放scale</strong>和<strong>移动translate</strong>以及<strong>矩阵变形matrix</strong>。</p><p>其中常用的是</p><p>(1)<strong>旋转rotate</strong>:</p><p>transform-origin定义的是旋转的基点，其中angle是指旋转角度，如果设置的值为正数表示顺时针旋转，如果设置的值为负数，则表示逆时针旋转,如transform:rotate(30deg):</p><p>(2)<strong>移动translate</strong></p><p>其基点默认为元素 中心点，也可以根据transform-origin进行改变基点。如transform:translate(100px,20px):</p><h4 id="移动控制"><a href="#移动控制" class="headerlink" title="移动控制"></a>移动控制</h4><p>（1）方法封装：this函数（用法合集：<a href="https://www.php.cn/js-tutorial-356092.html）">https://www.php.cn/js-tutorial-356092.html）</a></p><p><img src="/2020/02/15/js%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20200209101215043.png" alt="alt"></p><p>this决策树（其实好像用不上）</p><p>（2）键盘控制方法:</p><p>对应键码资料：<a href="https://www.cnblogs.com/anyefrozen/p/11275460.html">https://www.cnblogs.com/anyefrozen/p/11275460.html</a></p><p>（3）实现思路(js dom事件使用：<a href="https://blog.csdn.net/qq_44013790/article/details/86499821">https://blog.csdn.net/qq_44013790/article/details/86499821</a>)</p><p>计算移动值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"> set = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算x，y轴的变化与图像样式</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(a)&#123;</span><br><span class="line"></span><br><span class="line">​    redy-=speed;</span><br><span class="line"></span><br><span class="line">​    redtank.transform=<span class="string">&quot;rotate(-90deg)&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(b)&#123;</span><br><span class="line"></span><br><span class="line">​    redx+=speed;</span><br><span class="line"></span><br><span class="line">​    redtank.transform=<span class="string">&quot;rotate(360deg)&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(c)&#123;</span><br><span class="line"></span><br><span class="line">​    redy+=speed;</span><br><span class="line"></span><br><span class="line">​    redtank.transform=<span class="string">&quot;rotate(90deg)&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(d)&#123;</span><br><span class="line"></span><br><span class="line">​    redx-=speed;</span><br><span class="line"></span><br><span class="line">​    redtank.transform=<span class="string">&quot;rotate(180deg)&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//规定界限</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(redy&gt;=ymax)&#123;</span><br><span class="line"></span><br><span class="line">​    redy=ymax;</span><br><span class="line"></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(redy&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">   redy=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(redx&gt;=xmax)&#123;</span><br><span class="line"></span><br><span class="line">  redx=xmax;</span><br><span class="line"></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(redy&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">  redx=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> redtank.top=redy+<span class="string">&quot;px&quot;</span></span><br><span class="line"></span><br><span class="line"> redtank.left=redx+<span class="string">&quot;px&quot;</span> </span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>事件绑定与触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键响应</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">87</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">68</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">83</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    c = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">65</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    d = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">87</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    a = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">68</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">83</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    c = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(e.keyCode == <span class="number">65</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    d = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="迷宫布置"><a href="#迷宫布置" class="headerlink" title="迷宫布置"></a>迷宫布置</h4><p>要实现两点，迷宫的生成，和迷宫的阻碍机制</p><p>资料补充：<a href="https://blog.csdn.net/luqiren/article/details/82791646">https://blog.csdn.net/luqiren/article/details/82791646</a></p><p>(1)网页绘制canvas</p><p>简介：</p><p>向 HTML5 页面添加 canvas 元素。规定元素的 id、宽度和高度：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js绘制</p><p><img src="/2020/02/15/js%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20200210101318469.png" alt="alt"></p><p>图片用法：</p><p><img src="/2020/02/15/js%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20200210101554038.png" alt="alt"></p><p>（2）用img与canvas作为工具，插在html里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;brick&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js实践之坦克大战/brick.jpg&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​      在css里把img与canvas隐藏起来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">left</span>: -<span class="number">1000px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">left</span>: -<span class="number">1000px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子弹效果"><a href="#子弹效果" class="headerlink" title="子弹效果"></a>子弹效果</h4><p>//子弹机制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shoot</span>(<span class="params">x, y, diection</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (diection === <span class="string">&quot;up&quot;</span> &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">   y--;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (diection === <span class="string">&quot;right&quot;</span> &amp;&amp; x &lt;= <span class="number">300</span>) &#123;</span><br><span class="line"></span><br><span class="line">   x++;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (diection === <span class="string">&quot;dowm&quot;</span> &amp;&amp; y &lt;= <span class="number">150</span>) &#123;</span><br><span class="line"></span><br><span class="line">   y++;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (diection === <span class="string">&quot;left&quot;</span> &amp;&amp; x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">   x--;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cxt = biu.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">  cxt.fillStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line">  cxt.fillRect(x, y, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  i++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">50</span>) &#123;</span><br><span class="line"></span><br><span class="line">   i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   cxt.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要想法是利用了清屏的方法</p><h4 id="图片变化"><a href="#图片变化" class="headerlink" title="图片变化"></a>图片变化</h4><p>图片素材网：<a href="http://90sheji.com/png/anniu_6.html">http://90sheji.com/png/anniu_6.html</a></p><p>CSS3 filter(滤镜)属性</p><p>有一些ps改图的方式有用！！！</p><p>资料：<a href="https://www.cnblogs.com/mary-123/p/11880678.html">https://www.cnblogs.com/mary-123/p/11880678.html</a></p><h4 id="闪烁特效"><a href="#闪烁特效" class="headerlink" title="闪烁特效"></a>闪烁特效</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> status = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</span><br><span class="line">        pic.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        status = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pic.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&#x27;run()&#x27;</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>这个是无限进行闪烁！反复变化的一种思路</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> redblood = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (redhurt == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">​     redtank.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     redhurt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​     redtank.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     redhurt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​     btime++;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">if</span> (btime == <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">clearInterval</span>(redblood);</span><br><span class="line"></span><br><span class="line">​      redtank.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>此为闪烁几次便停下来！</p><h4 id="血条"><a href="#血条" class="headerlink" title="血条"></a>血条</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> drawred = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.redtiao&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> drawblue = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.bluetiao&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> cxr = drawred.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> cxb = drawblue.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"> cxr.fillStyle = <span class="string">&quot;chartreuse&quot;</span>;</span><br><span class="line"></span><br><span class="line"> cxb.fillStyle = <span class="string">&quot;chartreuse&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//红坦血条</span></span><br><span class="line"></span><br><span class="line"> cxr.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">350</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"> cxr.fillRect(<span class="number">0</span>, <span class="number">0</span>, redhp, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"> cxb.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">350</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"> cxb.fillRect(<span class="number">0</span>, <span class="number">0</span>, bluehp, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>善用canvas不停绘制，不停清屏。还要研究一下轴的反转</p><p>游戏结束（子窗口的使用）</p><p>主要思想是div的display：none或block控制出现消失</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gameover</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (redhp &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">document</span>.querySelector(<span class="string">&quot;.bg&quot;</span>).style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> over = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.gameover&quot;</span>).style;</span><br><span class="line"></span><br><span class="line"> over.backgroundImage = <span class="string">&quot;url(js实践之坦克大战/守护者.jpg)&quot;</span>;</span><br><span class="line"></span><br><span class="line"> over.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line"> redtank.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bluehp &lt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">document</span>.querySelector(<span class="string">&quot;.bg&quot;</span>).style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> over = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.gameover&quot;</span>).style;</span><br><span class="line"></span><br><span class="line"> over.backgroundImage = <span class="string">&quot;url(js实践之坦克大战/铁锤.jpg)&quot;</span>;</span><br><span class="line"></span><br><span class="line"> over.display=<span class="string">&quot;block&quot;</span></span><br><span class="line"></span><br><span class="line"> bluetank.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="音乐播放"><a href="#音乐播放" class="headerlink" title="音乐播放"></a>音乐播放</h4><p>音效素材网：<a href="http://www.aigei.com/">http://www.aigei.com/</a></p><p>html播放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音乐url&quot;</span>  <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">audio</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>js播放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio= <span class="keyword">new</span> Audio(<span class="string">&quot;/music/error.mp3&quot;</span>);*<span class="comment">//这里的路径写上mp3文件在项目中的绝对路径*</span></span><br><span class="line"></span><br><span class="line">audio.play();<span class="comment">//播放</span></span><br><span class="line">audio.pause();<span class="comment">//暂停</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一个前端项目，原生js开发的小游戏，运用了html5的canvas标签这个强大的工具。但是完全没有用面向对象，所以代码其实很初（辣）级（鸡）&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
